{"name":"Ircsnapshot","tagline":"Tool to gather information from IRC servers","body":"ircsnapshot\r\n===========\r\n\r\nTool to gather information from IRC servers\r\n\r\n<pre>$ python ircsnapshot.py\r\nusage: ircsnapshot.py [-h] [options] server [port]\r\n\r\nIRCSnapshot v0.9\r\nGathering information from IRC servers\r\nBy Brian Wallace (@botnet_hunter)\r\n\r\nOptions:\r\n  -n --nick NICK                Set nick of bot\r\n  -u --user USER                Set user of bot\r\n  -r --real REAL                Set real name of bot\r\n  -x --ssl                      SSL connection\r\n  -p --password PASS            Server password\r\n  -c --channels #chan1,#chan2   Additional channels to check\r\n  --proxy SERVER[:PORT]         SOCKS4 proxy to connect through\r\n  -o --output Directory         Output directory (default .)\r\n  -t --throttle 1.0             Seconds to sleep before sending commands (default 1)\r\n\r\n  -h --help                     Print this message\r\n\r\n</pre>\r\n\r\nOutput\r\n======\r\nThe UI writes the contents of the log, but the primary output is to a json file in the executing directory.\r\n<pre>\r\nserver.log.txt - Log file\r\nserver.json - JSON encoded list of links visible to connecting user\r\n{\r\n    'links': [], // List of link metadata\r\n    'linkList': {}, // Dictionary of links and users connected to them\r\n    'channels': {}, // Dictionary of channels and their metadata\r\n    'userList': {}, // Dictionary of channels and users in them\r\n    'users': {}, // Dictionary of users and their whois data\r\n    'userDetails': {} // Dictionary of parsed details from user's whois\r\n}\r\n</pre>\r\n\r\nOutput to.gexf.py\r\n=================\r\nOutput from to.gexf.py can be loaded in Gephi.  If the IP information is parsable, the output will include coordinates for Geolocation plugins for Gephi to plot to create an image like the following.\r\n\r\n![Sample 1 botnet mapped](https://raw2.github.com/bwall/ircsnapshot/master/ircsnapshot/example.png)\r\n![Sample 2 botnet mapped](http://openbwall.com/static/images/fi/allnet.link.png)\r\n![Sample 3 botnet graphed](http://openbwall.com/static/images/fi/irc.byroenet.com.UserToChannel.png)\r\n\r\nSupport Scripts\r\n===============\r\n<pre>$ python to.gexf.py\r\nusage: to.gexf.py [-h] [options] conversion input\r\n\r\nto.gexf v0.1\r\nConvert IRCSnapShot output to Gephi compatible format\r\nGexf output is to STDOUT\r\nBy Brian Wallace (@botnet_hunter)\r\n\r\nConversion Types:\r\n  UserToLink                    Show relation between users and links\r\n  UserToChannel                 Show relation between users and channels\r\n\r\nGPS:\r\n  -m MaxMind Location           Location of Maxmind database files (default .)\r\n\r\n  -h --help                     Print this message\r\n\r\nYou can get Maxmind databases from Maxmind.com.\r\nFree database: http://geolite.maxmind.com/download/geoip/database/GeoLiteCity_CSV/GeoLiteCity-latest.zip\r\n\r\n</pre>\r\n\r\nNotes\r\n=====\r\nPlease report any issues you encounter.  This tool has proven to be useful in a few cases so I decided it would be good to publish.\r\n\r\nProxy support currently is just for SOCKS5.  This is compatible with Tor.  I will add more proxy support in the future.  DNS queries will be sent through the proxy.\r\n\r\nTo Do\r\n=====\r\n * Session management (restoring after being banned, crashes, etc)\r\n * Set limit of channels to resolve per connection\r\n * Multiple connections with jobs across sesssions\r\n * Add optional CTCP queries\r\n * More scripts to parse data post scan\r\n * to.gexf.py to include a UserToGPS to create bot heat maps\r\n * More fail over states in to.gexf.py\r\n * Support multiple network inputs to to.gexf.py\r\n * Merge Maxmind databases as included file (add licensing)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}